<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Mobile Utils Plugin
    Created by Patryk Stepniewski
    Copyright (c) 2014-2019 gameDNA Ltd. All Rights Reserved.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="MobileUtils init"/>
  </init>
  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>
    <!-- Add permissions -->
    <addPermission android:name="android.permission.CAMERA" />
    <addPermission android:name="android.permission.ACCESS_FINE_LOCATION" />
  </androidManifestUpdates>
  <proguardAdditions>
	<insert>
	</insert>
  </proguardAdditions>
	<prebuildCopies>
		<copyDir src="$S(PluginDir)/Private/Android/Java" dst="$S(BuildDir)/src/" />
	</prebuildCopies>
  <resourceCopies>
  </resourceCopies>
  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>

    <insert>
 
    </insert>

  </gameActivityReadMetadataAdditions>
  <gameActivityImportAdditions>
	<insert>
		import android.widget.Toast;
		import android.os.BatteryManager;
		import android.content.Intent;
		import android.content.IntentFilter;
		import android.content.Context;
		import android.net.ConnectivityManager;
		import android.net.NetworkInfo;

		import android.location.Location;
		import android.location.LocationListener;
		import android.location.LocationManager;
		import android.provider.Settings;
		import android.os.IBinder;
		import android.content.pm.PackageManager;
		import android.content.Intent;
		import android.content.DialogInterface;
		import android.app.Service;
		import android.app.AlertDialog;
		import android.Manifest;
		import com.yrom.GPSTracker;
		import android.support.v4.app.ActivityCompat;
	</insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
  </androidManifestUpdates>

  <gameActivityClassAdditions>
	<insert>
		private Context context;
		private GPSTracker mgpstracker;
		public void AndroidThunkJava_SetOrientation(int orientation)
		{
		setRequestedOrientation(orientation);
		}

		public void AndroidThunkJava_StartActivity(String activity)
		{
		try {
		startActivity(new Intent(this, Class.forName(activity)));
		} catch(Exception e) {
		Log.debug("Can't start activity:" + e.getMessage());
		}
		}

		public String AndroidThunkJava_javafuncMethod(String str)
		{
		return str + "input void hi";
		}

		public void AndroidThunkJava_javafuncv1Method(String message)
		{
		// toast cause some error in ue4
		//Toast.makeText(getApplicationContext(),message, Toast.LENGTH_SHORT).show();
		}

		private Intent GetBatteryStatusIntent()
		{
		IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
		return context.registerReceiver(null, ifilter);
		//return getApplicationContext().registerReceiver(null, ifilter);
		}
		public float AndroidThunkJava_GetBatteryPct()
		{
		Intent batteryStatus = GetBatteryStatusIntent();

		int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
		int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);

		float batteryPct = level / (float)scale;
		return batteryPct;
		}
		public String AndroidThunkJava_GetAndroidID() {
		String android_id = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
		return android_id;
		}
		public int  AndroidThunkJava_getActiveNetworkInfo() {
		ConnectivityManager connectivityManager =
		(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
		if (networkInfo != null &amp;&amp; networkInfo.isConnected())
		{
		if(networkInfo.getType() == ConnectivityManager.TYPE_WIFI)
		{
		return 2;
		}
		if(networkInfo.getType() == ConnectivityManager.TYPE_MOBILE)
		{
		return 1;
		}
		}
		return 0;
		}

		public boolean  AndroidThunkJava_IsGpsEnabled()
		{

		return mgpstracker.IsGpsEnabled();
		}
		public void  AndroidThunkJava_GotoSetingGps()
		{
		Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
		startActivity(intent);
		}
		public double AndroidThunkJava_GetGPSlatitude()
		{
		mgpstracker.getLocation();
		return mgpstracker.getLatitude();
		}
		public double AndroidThunkJava_GetGPSlongitude()
		{
		return mgpstracker.getLongitude();
		}















		private static final int REQUEST_CODE_PERMISSION = 2;
		String mPermission = Manifest.permission.ACCESS_FINE_LOCATION;

	</insert>
  </gameActivityClassAdditions>
  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
		context = getApplicationContext();
		mgpstracker = GPSTracker.getsingltoninstance(context);
		try {
		if (ActivityCompat.checkSelfPermission(this, mPermission) != PackageManager.PERMISSION_GRANTED) {

		ActivityCompat.requestPermissions(this, new String[]{mPermission},
		REQUEST_CODE_PERMISSION);

		// If any permission above not allowed by user, this condition will
		// execute every time, else your else part will work
		}
		} catch (Exception e) {
		e.printStackTrace();
		}

	</insert>

  </gameActivityOnCreateAdditions>
</root>
