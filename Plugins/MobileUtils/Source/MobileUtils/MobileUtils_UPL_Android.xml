<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Mobile Utils Plugin
    Created by Patryk Stepniewski
    Copyright (c) 2014-2019 gameDNA Ltd. All Rights Reserved.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="MobileUtils init"/>
  </init>
  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>
    <!-- Add permissions -->
    <addPermission android:name="android.permission.CAMERA" />
    <addPermission android:name="android.permission.ACCESS_FINE_LOCATION" />
  </androidManifestUpdates>
  <proguardAdditions>
	<insert>
	</insert>
  </proguardAdditions>

  <resourceCopies>
  </resourceCopies>
  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>

    <insert>
 
    </insert>

  </gameActivityReadMetadataAdditions>
  <gameActivityImportAdditions>
	<insert>
    import android.widget.Toast;
    import android.os.BatteryManager;
    import android.content.Intent;
    import android.content.IntentFilter;
    import android.content.Context;
    import android.net.ConnectivityManager;
    import android.net.NetworkInfo;

    import android.location.Location;
    import android.location.LocationListener;
    import android.location.LocationManager;
    import android.provider.Settings;
    import android.os.IBinder;
    import android.content.pm.PackageManager;
    import android.content.Intent;
    import android.content.DialogInterface;
    import android.app.Service;
    import android.app.AlertDialog;
    import android.Manifest;
    import android.support.v4.app.ActivityCompat;
  </insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
  </androidManifestUpdates>

  <gameActivityClassAdditions>
	<insert>
		private Context context;

		public void AndroidThunkJava_SetOrientation(int orientation)
		{
		setRequestedOrientation(orientation);
		}

		public void AndroidThunkJava_StartActivity(String activity)
		{
		try {
		startActivity(new Intent(this, Class.forName(activity)));
		} catch(Exception e) {
		Log.debug("Can't start activity:" + e.getMessage());
		}
		}

		public String AndroidThunkJava_javafuncMethod(String str)
		{
		return str + "input void hi";
		}

		public void AndroidThunkJava_javafuncv1Method(String message)
		{
		// toast cause some error in ue4
		//Toast.makeText(getApplicationContext(),message, Toast.LENGTH_SHORT).show();
		}

		private Intent GetBatteryStatusIntent()
		{
		IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
		return context.registerReceiver(null, ifilter);
		//return getApplicationContext().registerReceiver(null, ifilter);
		}
		public float AndroidThunkJava_GetBatteryPct()
		{
		Intent batteryStatus = GetBatteryStatusIntent();

		int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
		int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);

		float batteryPct = level / (float)scale;
		return batteryPct;
		}
		public String AndroidThunkJava_GetAndroidID() {
		String android_id = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
		return android_id;
		}
		public int  AndroidThunkJava_getActiveNetworkInfo() {
		ConnectivityManager connectivityManager =
		(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
		if (networkInfo != null &amp;&amp; networkInfo.isConnected())
    {
    if(networkInfo.getType() == ConnectivityManager.TYPE_WIFI)
    {
    return 2;
    }
    if(networkInfo.getType() == ConnectivityManager.TYPE_MOBILE)
    {
    return 1;
    }
    }
    return 0;
    }

    public boolean  AndroidThunkJava_IsGpsEnabled()
    {
    gps = new GPSTracker(context);
    return gps.IsGpsEnabled();
    }
    public void  AndroidThunkJava_GotoSetingGps()
    {
       gps = new GPSTracker(context);
       gps.GotoSetingGps();
    }
    public double AndroidThunkJava_GetGPSlatitude()
    {
    gps = new GPSTracker(context);
    double latitude=1.25;
    // check if GPS enabled
    if(gps.canGetLocation()){

    latitude = gps.getLatitude();
    double longitude = gps.getLongitude();
    }else{
    // can't get location
    // GPS or Network is not enabled
    // Ask user to enable GPS/network in settings
    gps.showSettingsAlert();
    }
    return latitude;
    }

    public double AndroidThunkJava_GetGPSlongitude()
    {
    gps = new GPSTracker(context);
    double longitude=0;

    // check if GPS enabled
    if(gps.canGetLocation()){

    double latitude = gps.getLatitude();
    longitude = gps.getLongitude();
    }else{
    // can't get location
    // GPS or Network is not enabled
    // Ask user to enable GPS/network in settings
    gps.showSettingsAlert();
    }
    return longitude;
    }















    private static final int REQUEST_CODE_PERMISSION = 2;
    String mPermission = Manifest.permission.ACCESS_FINE_LOCATION;

    // GPSTracker class
    GPSTracker gps;
    class GPSTracker extends Service implements LocationListener
    {
    private final Context mContext;

    // flag for GPS status
    boolean isGPSEnabled = false;

    // flag for network status
    boolean isNetworkEnabled = false;

    // flag for GPS status
    boolean canGetLocation = false;

    Location location; // location
    double latitude; // latitude
    double longitude; // longitude

    // The minimum distance to change Updates in meters
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

    // The minimum time between updates in milliseconds
    private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute

    // Declaring a Location Manager
    protected LocationManager locationManager;

    public GPSTracker(Context context) {
    this.mContext = context;
    getLocation();
    if(!canGetLocation())
    {
    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
    mContext.startActivity(intent);
    }
    }
    public boolean IsGpsEnabled()
    {
    try {
    locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);

    // getting GPS status
    isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    return isGPSEnabled;
    }
    catch (Exception e) {
    e.printStackTrace();
    }
    return false;
    }
    public void GotoSetingGps()
    {
    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
    mContext.startActivity(intent);
    }
    public Location getLocation() {
    try {
    locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);

    // getting GPS status
    isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

    // getting network status
    isNetworkEnabled = locationManager
    .isProviderEnabled(LocationManager.NETWORK_PROVIDER);

    if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
    // no network provider is enabled
    } else {
    this.canGetLocation = true;
    // First get location from Network Provider
    if (isNetworkEnabled) {
    locationManager.requestLocationUpdates(
    LocationManager.NETWORK_PROVIDER,
    MIN_TIME_BW_UPDATES,
    MIN_DISTANCE_CHANGE_FOR_UPDATES, this);

    Log.debug("Network");
    if (locationManager != null) {
    location = locationManager
    .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

    if (location != null) {
    latitude = location.getLatitude();
    longitude = location.getLongitude();
    }
    }
    }

    // if GPS Enabled get lat/long using GPS Services
    if (isGPSEnabled) {
    if (location == null) {
    locationManager.requestLocationUpdates(
    LocationManager.GPS_PROVIDER,
    MIN_TIME_BW_UPDATES,
    MIN_DISTANCE_CHANGE_FOR_UPDATES, this);

    Log.debug("GPS Enabled");
    if (locationManager != null) {
    location = locationManager
    .getLastKnownLocation(LocationManager.GPS_PROVIDER);

    if (location != null) {
    latitude = location.getLatitude();
    longitude = location.getLongitude();
    }
    }
    }
    }
    }

    } catch (Exception e) {
    e.printStackTrace();
    }

    return location;
    }

    /**
    * Stop using GPS listener
    * Calling this function will stop using GPS in your app
    * */

    public void stopUsingGPS(){
    if(locationManager != null){
    locationManager.removeUpdates(GPSTracker.this);
    }
    }

    /**
    * Function to get latitude
    * */

    public double getLatitude(){
    if(location != null){
    latitude = location.getLatitude();
    }

    // return latitude
    return latitude;
    }

    /**
    * Function to get longitude
    * */

    public double getLongitude(){
    if(location != null){
    longitude = location.getLongitude();
    }

    // return longitude
    return longitude;
    }

    /**
    * Function to check GPS/wifi enabled
    * @return boolean
    * */

    public boolean canGetLocation() {
    return this.canGetLocation;
    }

    /**
    * Function to show settings alert dialog
    * On pressing Settings button will lauch Settings Options
    * */

    public void showSettingsAlert(){
    AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);

    // Setting Dialog Title
    alertDialog.setTitle("GPS is settings");

    // Setting Dialog Message
    alertDialog.setMessage("GPS is not enabled. Do you want to go to settings menu?");

    // On pressing Settings button
    alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog,int which) {
    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
    mContext.startActivity(intent);
    }
    });

    // on pressing cancel button
    alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
    dialog.cancel();
    }
    });

    // Showing Alert Message
    alertDialog.show();
    }

    @Override
    public void onLocationChanged(Location location) {
    }

    @Override
    public void onProviderDisabled(String provider) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }

    @Override
    public IBinder onBind(Intent arg0) {
    return null;
    }
    }
  </insert>
  </gameActivityClassAdditions>
  <!-- optional additions to GameActivity onCreate in GameActivity.java -->
  <gameActivityOnCreateAdditions>
    <insert>
      context = getApplicationContext();
      try {
      if (ActivityCompat.checkSelfPermission(this, mPermission) != PackageManager.PERMISSION_GRANTED) {

      ActivityCompat.requestPermissions(this, new String[]{mPermission},
      REQUEST_CODE_PERMISSION);

      // If any permission above not allowed by user, this condition will
      // execute every time, else your else part will work
      }
      } catch (Exception e) {
      e.printStackTrace();
      }
     
    </insert>

  </gameActivityOnCreateAdditions>
</root>
